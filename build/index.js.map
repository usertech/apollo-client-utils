{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 4b55bd299dca89817af3","webpack:///external \"apollo-cache-inmemory\"","webpack:///./src/createIntrospectionFragmentMatcher.js","webpack:///./src/createDefaultApolloClient.js","webpack:///./src/createMockLink.js","webpack:///./src/index.js","webpack:///external \"apollo-client\"","webpack:///./src/IntrospectionFragmentMatcherQuery.gql","webpack:///external \"apollo-link-schema\""],"names":["makePromise","execute","query","IntrospectionFragmentMatcherQuery","introspectionQueryResult","__schema","types","type","introspectionQueryResultData","cache","createIntrospectionFragmentMatcher","cacheOptions","fragmentMatcher","createMockLink","defaultOperationDelay","operationsDelays","mocks","preserveResolvers","makeExecutableSchemaParams","schema","makeExecutableSchema","addMockFunctionsToSchema","mockLink","context","getContext","delayLink","presetOperationDelay","operationDelay","setTimeout","handle","next","observer","error","complete","ApolloLink"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@usertech/apollo-client-utils\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@usertech/apollo-client-utils\"] = factory();\n\telse\n\t\troot[\"@usertech/apollo-client-utils\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4b55bd299dca89817af3","module.exports = require(\"apollo-cache-inmemory\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"apollo-cache-inmemory\"\n// module id = 0\n// module chunks = 0","import { execute, makePromise } from 'apollo-link';\nimport { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\n\nimport IntrospectionFragmentMatcherQuery from './IntrospectionFragmentMatcherQuery.gql';\n\nconst createIntrospectionFragmentMatcher = async ({ link }) => {\n\tconst introspectionQueryResult = await makePromise(\n\t\texecute(link, { query: IntrospectionFragmentMatcherQuery }),\n\t);\n\tconst introspectionQueryResultData = {\n\t\t__schema: {\n\t\t\ttypes: introspectionQueryResult.data.__schema.types.filter(\n\t\t\t\t(type) => type.possibleTypes !== null,\n\t\t\t),\n\t\t},\n\t};\n\n\treturn new IntrospectionFragmentMatcher({\n\t\tintrospectionQueryResultData,\n\t});\n};\n\nexport default createIntrospectionFragmentMatcher;\n\n\n\n// WEBPACK FOOTER //\n// ./src/createIntrospectionFragmentMatcher.js","import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport createIntrospectionFragmentMatcher from './createIntrospectionFragmentMatcher';\n\nconst createDefaultApolloClient = async ({ link, useIntrospectionFragmentMatcher = false }) => {\n\tlet cacheOptions = {};\n\tif (useIntrospectionFragmentMatcher) {\n\t\tcacheOptions = {\n\t\t\t...cacheOptions,\n\t\t\tfragmentMatcher: await createIntrospectionFragmentMatcher({ link }),\n\t\t};\n\t}\n\n\tconst cache = new InMemoryCache(cacheOptions);\n\n\treturn new ApolloClient({\n\t\tlink,\n\t\tcache,\n\t});\n};\n\nexport default createDefaultApolloClient;\n\n\n\n// WEBPACK FOOTER //\n// ./src/createDefaultApolloClient.js","import { ApolloLink, Observable } from 'apollo-link';\nimport { SchemaLink } from 'apollo-link-schema';\nimport { makeExecutableSchema, addMockFunctionsToSchema } from 'graphql-tools';\n\nconst createMockLink = ({\n\tdefaultOperationDelay = 500,\n\toperationsDelays = {\n\t\tIntrospectionFragmentMatcherQuery: 1200,\n\t},\n\tmocks,\n\tpreserveResolvers = true,\n\t...makeExecutableSchemaParams\n}) => {\n\t// mock link\n\tconst schema = makeExecutableSchema(makeExecutableSchemaParams);\n\taddMockFunctionsToSchema({ schema, mocks, preserveResolvers });\n\tconst mockLink = new SchemaLink({\n\t\tschema,\n\t\tcontext: ({ getContext }) => getContext(),\n\t});\n\n\t// delay link\n\tconst delayLink = new ApolloLink((operation, forward) => {\n\t\tconst { operationName } = operation;\n\t\tconst presetOperationDelay = operationsDelays[operationName];\n\t\tconst operationDelay =\n\t\t\ttypeof presetOperationDelay !== 'undefined' ? presetOperationDelay : defaultOperationDelay;\n\t\treturn new Observable((observer) => {\n\t\t\tlet handle;\n\t\t\t// eslint-disable-next-line\n\t\t\tsetTimeout(() => {\n\t\t\t\thandle = forward(operation).subscribe({\n\t\t\t\t\tnext: observer.next.bind(observer),\n\t\t\t\t\terror: observer.error.bind(observer),\n\t\t\t\t\tcomplete: observer.complete.bind(observer),\n\t\t\t\t});\n\t\t\t}, operationDelay);\n\t\t\treturn () => {\n\t\t\t\tif (handle) handle.unsubscribe();\n\t\t\t};\n\t\t});\n\t});\n\n\treturn ApolloLink.from([delayLink, mockLink]);\n};\n\nexport default createMockLink;\n\n\n\n// WEBPACK FOOTER //\n// ./src/createMockLink.js","import createDefaultApolloClient from './createDefaultApolloClient';\nimport createIntrospectionFragmentMatcher from './createIntrospectionFragmentMatcher';\nimport createMockLink from './createMockLink';\n\nexport { createDefaultApolloClient, createIntrospectionFragmentMatcher, createMockLink };\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = require(\"apollo-client\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"apollo-client\"\n// module id = 4\n// module chunks = 0","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"IntrospectionFragmentMatcherQuery\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__schema\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"types\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"kind\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"possibleTypes\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":122}};\n    doc.loc.source = {\"body\":\"query IntrospectionFragmentMatcherQuery {\\n\\t__schema {\\n\\t\\ttypes {\\n\\t\\t\\tkind\\n\\t\\t\\tname\\n\\t\\t\\tpossibleTypes {\\n\\t\\t\\t\\tname\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"IntrospectionFragmentMatcherQuery\"] = oneQuery(doc, \"IntrospectionFragmentMatcherQuery\");\n        \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/IntrospectionFragmentMatcherQuery.gql\n// module id = 5\n// module chunks = 0","module.exports = require(\"apollo-link-schema\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"apollo-link-schema\"\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}